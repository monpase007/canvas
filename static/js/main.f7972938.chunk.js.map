{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","data","min","max","forEach","y","minMax","yMin","yMax","size","width","height","dpiSize","viewHeight","padding","step","textStep","Ky","canvas","useRef","console","log","useEffect","canv","document","querySelector","length","ctx","current","getContext","style","beginPath","i","text","strokeStyle","font","fillStyle","fillText","moveTo","lineTo","stroke","closePath","lineWidth","x","className","id","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8LAmGeA,MAhGf,WAEE,MAAwBC,mBAAS,CAC/B,CAAC,EAAG,GACJ,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,OANR,mBAAOC,EAAP,KAQA,GARA,KAqEA,SAAgBA,GACd,IAAIC,EACAC,EAOJ,OANI,OAAJF,QAAI,IAAJA,KAAMG,SAAQ,YAAY,IAARC,EAAO,oBACJ,kBAARH,IAAkBA,EAAMG,GAChB,kBAARF,IAAkBA,EAAME,GAC/BH,EAAMG,IAAGH,EAAMG,GACfF,EAAME,IAAGF,EAAME,MAEd,CAACH,EAAKC,GAtEMG,CAAOL,IAA5B,mBAAOM,EAAP,KAAaC,EAAb,KAGMC,EAAO,CAAEC,MAAO,IAAKC,OAAQ,KAC7BC,EAAU,CAAEF,MAAoB,EAAbD,EAAKC,MAAWC,OAAsB,EAAdF,EAAKE,QAChDE,EAAaD,EAAQD,OAAUG,GAC/BC,EAAOF,EAJK,EAKZG,GAAYR,EAAKD,GALL,EAOZU,EAAKJ,GADIL,EAAKD,GAGdW,EAASC,mBA8Df,OA3DAC,QAAQC,IAAId,EAAKC,GAEjBc,qBAAU,WACR,IAAMC,EAAOC,SAASC,cAAc,WAIpC,GAHAL,QAAQC,IAAIE,GACZH,QAAQC,IAAIH,GAERjB,EAAKyB,OAAQ,CAAC,IAAD,EACTC,EAAG,OAAGT,QAAH,IAAGA,GAAH,UAAGA,EAAQU,eAAX,aAAG,EAAiBC,WAAW,MACxCX,EAAOU,QAAQE,MAAMpB,MAArB,iBAAgCD,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAMC,MAAtC,MACAQ,EAAOU,QAAQE,MAAMnB,OAArB,iBAAiCF,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAME,OAAvC,MACAO,EAAOU,QAAQlB,MAAf,OAAuBE,QAAvB,IAAuBA,OAAvB,EAAuBA,EAASF,MAChCQ,EAAOU,QAAQjB,OAAf,OAAwBC,QAAxB,IAAwBA,OAAxB,EAAwBA,EAASD,OAKjCgB,EAAII,YACJ,IAAK,IAAIC,EAAI,EAAGA,GA9BF,EA8BkBA,IAAK,CACnC,IAAM3B,EAAIU,EAAOiB,EACXC,EAAOzB,EAAOQ,EAAWgB,EAC/BL,EAAIO,YAAc,OAClBP,EAAIQ,KAAO,yBACXR,EAAIS,UAAY,OAChBT,EAAIU,SAASJ,EAAM,GAAI5B,EArCb,GAqC2B,IACrCsB,EAAIW,OAAO,EAAGjC,EAtCJ,IAuCVsB,EAAIY,OAAO3B,EAAQF,MAAOL,EAvChB,IA0CZsB,EAAIa,SACJb,EAAIc,YAIJd,EAAII,YACJJ,EAAIe,UAAY,EAChBf,EAAIO,YAAc,UAEd,OAAJjC,QAAI,IAAJA,KAAMG,SAAQ,YAAa,IAAD,mBAAVuC,EAAU,KAAPtC,EAAO,KACxBsB,EAAIY,OAAOI,EAAG/B,EAAQD,QAAUN,EAAIY,EApD1B,QAsDZU,EAAIa,SACJb,EAAIc,eAGL,CAACxC,IAeF,qBAAK2C,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,OAAf,SACE,wBAAQC,GAAG,SAASC,IAAK5B,EAAQ0B,UAAW,kBC9EvCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,SAM1BZ,K","file":"static/js/main.f7972938.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [data, setData] = useState([\n    [0, 0],\n    [100, 100],\n    [200, 200],\n    [300, 300],\n    [200, 400],\n    [100, 500],\n  ])\n  const [yMin, yMax] = minMax(data)\n  const padding = 40\n  const countLine = 5\n  const size = { width: 600, height: 400 }\n  const dpiSize = { width: size.width * 2, height: size.height * 2 }\n  const viewHeight = dpiSize.height - (padding * 2)\n  const step = viewHeight / countLine\n  const textStep = (yMax-yMin)/countLine\n  const delta = (yMax-yMin)\n  const Ky = viewHeight/delta\n\n  const canvas = useRef();\n\n\n  console.log(yMin,yMax)\n\n  useEffect(() => {\n    const canv = document.querySelector('#canvas')\n    console.log(canv)\n    console.log(canvas)\n\n    if (data.length) {\n      const ctx = canvas?.current?.getContext('2d')\n      canvas.current.style.width = `${size?.width}px`\n      canvas.current.style.height = `${size?.height}px`\n      canvas.current.width = dpiSize?.width\n      canvas.current.height = dpiSize?.height\n\n\n      ///////////////////////////////////////////\n\n      ctx.beginPath()\n      for (let i = 0; i <= countLine; i++) {\n        const y = step * i\n        const text = yMax - textStep * i\n        ctx.strokeStyle = '#bbb'\n        ctx.font = 'normal 30px sans-serif'\n        ctx.fillStyle = '#000'\n        ctx.fillText(text, 10, y + padding - 10)\n        ctx.moveTo(0, y + padding)\n        ctx.lineTo(dpiSize.width, y + padding)\n      }\n\n      ctx.stroke()\n      ctx.closePath()\n\n      ///////////////////////////////////////////\n\n      ctx.beginPath()\n      ctx.lineWidth = 5;\n      ctx.strokeStyle = '#ff0000'\n\n      data?.forEach(([x, y]) => {\n        ctx.lineTo(x, dpiSize.height - (y * Ky + padding))\n      })\n      ctx.stroke()\n      ctx.closePath()\n    }\n\n  }, [data])\n\n  function minMax(data) {\n    let min\n    let max\n    data?.forEach(([, y]) => {\n      if (typeof min !== 'number') min = y\n      if (typeof max !== 'number') max = y\n      if (min > y) min = y\n      if (max < y) max = y\n    })\n    return [min, max]\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"card\">\n          <canvas id='canvas' ref={canvas} className={'canvas'}>\n\n          </canvas>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}